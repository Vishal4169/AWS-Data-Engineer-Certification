DEA-C01

1.Compute:

Services:
1.Amazon Elastic Compute Cloud (EC2)
2.AWS Batch
3.AWS Lambda
4.AWS Serverless Application Model (SAM)
5.Amazon Elastic Container Service (ECS)
6.Amazon Elastic Container Registry (ECR)
7.Amazon Elastic Kubernetes Service (EKS)

1.0.What is Compute in AWS?

-compute resources are the brains and processing power required by applications and systems to carry out computational tasks via a series of instructions.
-compute is closely related to common server components that you’re probably already familiar with, such as CPUs and RAM.
-physical server within a data center would be considered a compute resource, as it probably has multiple CPUs and many gigabytes of RAM to process instructions given by the operating system and applications. 
-There are a number of different services and features that offer compute power to provide different functions. 
-Some services may utilize hundreds of EC2 instances, or virtual servers, which may be used continuously for months or even years, processing billions of instructions

1.1.Amazon EC2: Elastic Compute Cloud:

-allows you to deploy virtual servers within your AWS environment

components:

//Amazon Machine Images(AMIs):

-AMIs are essentially templates of pre-configured EC2 instances which allow you to quickly launch a new EC2 instance based on the configuration defined within the AMI.

-prevents you from needing to install an operating system or any other common applications that you might need to install on a number of other EC2 instances.

- high-level perspective, an AMI is an image baseline that includes an operating system and applications, along with any additional custom configuration. 

-different operating systems including Amazon Linux, macOS, Ubuntu, and Microsoft Windows, among others.

-You can also create your own AMIs to help speed up your deployment process

- custom AMI as the base image for a new instance and it will launch with Amazon Linux, your custom applications already installed, and any configuration changes already made.

-implementing auto-scaling, where multiple instances of your baseline configuration may need to be spun up quickly to meet increasing levels of demand.

-both AWS-managed and your own custom-managed AMIs, you could also select an AMI from the AWS Marketplace. 

-choose from Community AMIs, which are public AMIs that can be created and shared by anyone.

//Instance types:

. An instance type simply defines the size of the instance based on a number of different parameters, including:

-vCPUs, which are the number of virtual CPUs on the instance,

-Architecture, which is the processor architecture, such as i386, x86, or ARM,

-Memory, or the number of gigabytes of RAM associated with the instance,

-Storage, which shows the capacity of any local instance store volumes, if available on the instance, as well as 

-Storage type, which indicates whether the instance store volumes are magnetic hard disks or SSDs, and 

-Network performance, which shows the performance level or rate of data transfer.

Note:vCPUs, memory, instance storage, and network performance is essential for creating the ec2

These instance families can be summarized as follows:

-General Purpose, which have a balanced mix of CPU, memory, and storage, making them ideal for small to medium databases, test and development environments, or web servers.

-Compute Optimized, which have a greater focus on compute power and are ideal for applications requiring high performance processors, such as batch processing or machine learning.

-Memory Optimized, which are primarily used for large-scale enterprise class in-memory applications, such as performing real-time processing of unstructured data.

-Accelerated Computing, which utilize hardware accelerators or co-processors to perform floating-point calculations faster and more efficiently.

-Storage Optimized, which are optimized for enhanced storage. Instances in this family use SSD backed instance storage for low latency and very high input/output, or I/O performance, including very high IOPS which is input/output operations per second. These instances are useful for data file systems and log processing applications.

-And finally, HPC Optimized, which are designed for high performance computing, or HPC workloads.

//Instance purchasing options:

optimize costs by allowing you to select the most appropriate option for your deployment. These options include:

On-Demand Instances:

-On-Demand Instances are EC2 instances that you can launch at any time and have provisioned and available for you to use within minutes.
- You can use On-Demand Instances for as long as you need before terminating the instance. These instances have a flat hourly rate that’s based on the instance type you choose, and is billed by the second.
- On-Demand Instances are typically used for short-term or irregular workloads that cannot be interrupted. 
-Many customers use On-Demand Instances for testing and development environments. And once you stop or terminate your On-Demand Instance, you’ll stop paying for it.

Spot Instances:

-which leverage unused EC2 capacity to provide huge discounts over On-Demand pricing.

- Spot instances have a variable hourly price that is set by AWS based on supply and demand. 

-When launching Spot Instances, you have the ability to set a maximum price that you’re willing to pay for the instance. 

-If the Spot price ever exceeds your maximum price, or if Spot capacity is no longer available, the EC2 service will reclaim the instance through what is called a Spot Instance interruption.

- When this happens, your instance will terminate, stop, or hibernate based on the behavior you specified when creating your Spot request. 

-Because demand for Spot Instances can fluctuate, there’s always a risk that your instances may be interrupted at any time. Because of this, Spot instances are only suitable for applications that are resilient to interruptions, such as batch jobs or background processing of data.

Reserved Instances:

-Reserved Instances allow you to purchase a discount for an On-Demand Instance type with set criteria and for a set period of time. 

- makes them ideal for long-term and predictable workloads.

-Reserved Instances must be purchased in either one-year or three-year commitments

You can save even more money with Reserved Instances based on how much money you wish to pay up front:

-With All Upfront, the complete payment for the Reserved Instance is paid at the beginning of the term. This offers the largest discount and no further payment is required regardless of the number of hours the instance is used.

-If you choose Partial Upfront, a smaller payment is made at the start of the term and then a discount is applied to all remaining hours during the term.

- And finally, with No Upfront, no upfront or partial payments are made and the smallest discount of these three options is applied to all the remaining hours in the term.

Note:
- purchased a Reserved Instance, it’s yours for the entire one or three-year term and can’t be canceled.

-if your computing needs change during the course of your term, it may be possible to make changes to your Reserved Instance, or even exchange it for another one depending on which offering class you choose.

-Reserved Instances come in two offering classes, Standard and Convertible.

Standard Reserved Instance:
 -it’s possible to modify some attributes of your instance, including its availability zone or size within your current instance family, such as going from a t2.micro to a t2.large. 
 -Standard Reserved Instances cannot be exchanged or changed to a different instance family, so going from a t2.large to an m4.large would not be possible. That being said, it is possible to buy and sell Standard Reserved Instances in the AWS Reserved Instances Marketplace.

Convertible Reserved Instance:
-It can also be modified as I just described, but it can also be exchanged for another Convertible Reserved Instance with completely new attributes, including a different instance family, type, or platform.
- But in exchange for this greater flexibility, Convertible Reserved Instances come with a smaller discount than Standard Reserved Instances. And unlike Standard Reserved Instances, it’s not possible to buy or sell Convertible Reserved Instances in the AWS Reserved Instances Marketplace.

On-Demand Capacity Reservations:
-On-Demand Capacity Reservations allow you to reserve capacity for your EC2 instances based on different attributes such as instance type and platform within a particular availability zone.
-However, On-Demand Capacity Reservations may be made for any length of time, not just one year or three years.
- Ensures that you’ll always have the available number of instances you require within a specific availability zone immediately and without an unnecessarily long time commitment.
-You don’t receive any billing discounts when using On-Demand Capacity Reservations, but you have the flexibility to create and cancel these reservations as often as you need. 
-For additional cost savings, you can combine On-Demand Capacity Reservations with Reserved Instances or with EC2 Instance Savings Plans, which allow you to save money in exchange for a commitment to use a given amount of compute power over a given time period.

//Tenancy:
-EC2 tenancy and how it relates to the underlying host, or physical server within an AWS data center where your EC2 instance will reside.

Shared Tenancy:
- launch a new EC2 instance, it will run with shared tenancy by default. This means it will run on any available host with the specified resources required for your selected instance type, regardless of which other customers and users may also have instances running on the same host, hence the name shared tenancy.

Note:
-Now AWS implements advanced security mechanisms to prevent different customers’ EC2 instances from accessing each other on the same host, so there isn’t any sort of security risk here, but there may be instances where your workloads must run on dedicated hardware due to internal security policies or external compliance controls. In these cases, you’ll want to use dedicated tenancy.

Dedicated Tenancy:
-Dedicated tenancy includes both Dedicated Instances and Dedicated Hosts.

Dedicated Instances:
-Dedicated Instances are hosted on hardware that no other customers can access.
-They incur additional charges because no other customers may run EC2 instances on the same hardware, and so there will likely be unused capacity remaining. 
-However, this hardware can be shared by other resources you have running in your own account. 

Dedicated Host:
-A Dedicated Host is effectively the same as a Dedicated Instance.
- Dedicated Hosts offer additional visibility and control around how you can place your instances on the physical host.
- allow you to use your existing per-socket, per-core, or per-VM software licenses that may need to be tied to a specific machine.

Note:
- don't need to address any specific licensing, compliance, or security issues that would require dedicated tenancy, then I’d recommend using the default shared tenancy to reduce your overall costs.


//User data:
-When configuring a new EC2 instance, you’ll come across a section called User Data.
-allows you to enter commands or a command script that will run during the first boot cycle of the instance.
- way to automatically perform functions at boot time, such as pulling down additional software to install from any software repositories you may have.
-download and install the latest OS updates. For example, you could enter yum update dash y, which for a Linux instance will update its own software automatically at the time of boot.

//Storage options:
-When setting up a new EC2 instance, you’ll also be asked to select and configure your storage requirements.
- Selecting storage for your EC2 instance will depend on the type of instance selected, how you intend to use the instance, and how critical your data.
-Persistent storage is available by attaching elastic block storage volumes using Amazon Elastic Block Store, or EBS. 
-Ephemeral storage is created by some EC2 instances themselves using instance store volumes, which are local disks on the underlying physical host.

Each of these storage options:
-EBS volumes are separate devices from the EC2 instance itself, so they aren’t physically attached like ephemeral storage. 
-EBS volumes are considered network-attached storage devices, which are then logically attached to the EC2 instance via the AWS network. 
-This is similar to attaching an external hard drive to your home laptop or PC, where the external hard drive represents your EBS volume, and the PC represents your EC2 instance. 
-The data on your EBS volumes is automatically replicated within the same availability zone for resiliency, which is managed by AWS. 
-You can disconnect an EBS volume from your EC2 instance and the data will remain intact, allowing you to reattach it to another EC2 instance within the same availability zone if required.
-It’s also possible to take point-in-time snapshots that will backup all the data on an EBS volume to S3.
-You can also implement encryption on your EBS volumes if needed.
-This can be done by default for all new EBS volumes and copies of snapshots you create by enabling encryption by default from within the EC2 dashboard in the AWS console. 
-You can also choose to enable encryption on a per-volume basis instead.

-Ephemeral storage, or instance-backed storage, is storage that is physically attached to the underlying host on which the EC2 instance resides.
-You can’t detach an ephemeral instance store volume from an instance.
-This is similar to your laptop or PC’s internal hard drive. There is one key difference here, though. With EC2 instances, all saved data on an instance store volume is lost as soon as the instance hibernates, is stopped, or is terminated.
-If you reboot your instance, then the data will remain.
-But if the instance hibernates, stops, or terminates, or if there’s any kind of hardware failure with the underlying disk, the data on that instance store volume will be lost forever.
-Because instance store volumes are physically attached, they’re extremely fast, which makes them great for storing cache data and other temporary content.
- if you have data that you need to retain, you should use EBS volumes for persistent data storage instead.

//Security.
-Security is fundamental with any AWS deployment. 
-select a security group for your instance.
-A security group is essentially an instance-level firewall allowing you to restrict both ingress and egress traffic to your instance by specifying what traffic is allowed to communicate with it.
-You can restrict this communication by source ports and protocols for both inbound and outbound communication.
-Your instances are then associated with this security group, which can then be associated with other instances

Security Groups.
-When creating an EC2 instance, you’ll also need to select an existing key pair or create and download a new one.
- a key pair consists of a pair of keys: a public key and a private key. Key pairs are used to encrypt the login information for Linux and Windows EC2 instances, then decrypt that same information, allowing you to authenticate to the instance. 
-The public key is used to encrypt data, such as the username and password. 
-For Windows instances, the private key is used to decrypt this data, allowing you to gain access to the login credentials including the password. 
-For Linux instances, the private key is used to remotely connect to the instance using SSH.

-The public key is held and kept by AWS, but the private key is your responsibility to keep and ensure that it is never lost or compromised. 
-If you choose to create a new key pair for your EC2 instance, it will download to your local machine after you create it.
-After you’ve authenticated to your EC2 instance for the first time, you can set up additional, less-privileged access controls such as local Windows accounts, allowing other users to connect and authenticate to your instance.

Note:
-maintain and install the latest OS and security patches released by the OS vendor as dictated by the AWS Shared Responsibility Model.


